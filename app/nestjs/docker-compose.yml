services:
  kong:
    build:
      context: ../kong
    container_name: kong
    networks:
      - backend
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /tmp/kong_rendered.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: "bundled,jwt"
      AWS_KEY: ${AWS_KEY}
      AWS_SECRET: ${AWS_SECRET}
      AWS_REGION: ${AWS_REGION}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001" 
      - "8444:8444" 
    volumes:
      - ../kong/kong.yml:/kong/kong.yml:ro
    command: >
      sh -c "envsubst < /kong/kong.yml > /tmp/kong_rendered.yml &&
            kong start --vv"
    depends_on:
      - user-service
      - trip-service
      - driver-service
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" 
      - "15672:15672"
    networks:
      - backend

  user-service:
    image: node:20
    container_name: user-service
    working_dir: /usr/src/app
    volumes:
      - ./:/usr/src/app
    command: npm run start:user
    depends_on:
      - user-db
      - rabbitmq
    networks:
      - backend

  driver-service:
    image: node:20
    container_name: driver-service
    working_dir: /usr/src/app
    volumes:
      - ./:/usr/src/app
    command: npm run start:driver
    depends_on:
      - driver-db
      - rabbitmq
    networks:
      - backend

  trip-service:
    image: node:20
    container_name: trip-service
    working_dir: /usr/src/app
    volumes:
      - ./:/usr/src/app
    command: npm run start:trip
    depends_on:
      - trip-db
      - rabbitmq
    networks:
      - backend

  user-db:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USER_DB}
    ports:
      - "5433:5432"
    networks:
      - backend

  driver-db:
    image: postgres:15
    container_name: driver-db
    environment:
      POSTGRES_USER: ${POSTGRES_DRIVER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DRIVER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DRIVER_DB}
    ports:
      - "5434:5432"
    networks:
      - backend

  trip-db:
    image: mysql:8
    container_name: trip-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_TRIP_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_TRIP_USER}
      MYSQL_PASSWORD: ${MYSQL_TRIP_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_TRIP_DATABASE}
    ports:
      - "3307:3306"
    networks:
      - backend
    
  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

networks:
  backend:
    driver: bridge
